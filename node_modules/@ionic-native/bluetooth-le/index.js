var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * This is a template for new plugin wrappers
 *
 * TODO:
 * - Add/Change information below
 * - Document usage (importing, executing main functionality)
 * - Remove any imports that you are not using
 * - Add this file to /src/index.ts (follow style of other plugins)
 * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added
 * - Remove this note
 *
 */
import { Injectable } from '@angular/core';
import { Plugin, Cordova, CordovaProperty, IonicNativePlugin } from '@ionic-native/core';
// import { Plugin, Cordova, CordovaProperty, CordovaInstance, InstanceProperty, IonicNativePlugin } from '@ionic-native/core';
import { Observable } from 'rxjs/Observable';
/**
 * @name Bluetooth L E
 * @description
 * This plugin does something
 *
 * @usage
 * ```typescript
 * import { BluetoothLE } from '@ionic-native/bluetooth-le';
 *
 *
 * constructor(private bluetoothLE: BluetoothLE) { }
 *
 * ...
 *
 *
 * this.bluetoothLE.functionName('Hello', 123)
 *   .then((res: any) => console.log(res))
 *   .catch((error: any) => console.error(error));
 *
 * ```
 */
var BluetoothLE = (function (_super) {
    __extends(BluetoothLE, _super);
    function BluetoothLE() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // constructor() {
    //   super();
    // }
    // @Cordova({callbackOrder: 'reverse', observable: true})
    // subscrxe (params: ICharacteristicPath): Observable<{status: 'subscribed' | 'subscribedResult', value: string}> {
    //   return;
    // }
    /**
     * This function does something
     * @param arg1 {string} Some param to configure something
     * @param arg2 {number} Another param to configure something
     * @return {Promise<any>} Returns a promise that resolves when something happens
     */
    // @Cordova()
    // functionName(arg1: string, arg2: number): Promise<any> {
    //   return; // We add return; here to avoid any IDE / Compiler errors
    // }
    // @Cordova({callbackOrder: 'reverse'})
    // initialize (params?: {request?: boolean, statusReceiver?: boolean, restoreKey?: string}):
    // Promise<{ status: 'enabled' | 'disabled', message?: string }> {
    //   return;
    // }
    BluetoothLE.prototype.initialize = function (params) {
        return;
    };
    BluetoothLE.prototype.enable = function () {
        return;
    };
    BluetoothLE.prototype.getAdapterInfo = function () {
        return;
    };
    BluetoothLE.prototype.retrieveConnected = function (params) {
        return;
    };
    BluetoothLE.prototype.isEnabled = function () {
        return;
    };
    BluetoothLE.prototype.requestPermission = function () {
        return;
    };
    BluetoothLE.prototype.requestLocation = function () {
        return;
    };
    BluetoothLE.prototype.isLocationEnabled = function () {
        return;
    };
    BluetoothLE.prototype.startScan = function (params) {
        return;
    };
    BluetoothLE.prototype.hasPermission = function () {
        return;
    };
    BluetoothLE.prototype.disconnect = function (params) {
        return;
    };
    /**
     * Note, no callback will occur on write without response on iOS.
     */
    BluetoothLE.prototype.write = function (params) {
        return;
    };
    BluetoothLE.prototype.read = function (params) {
        return;
    };
    BluetoothLE.prototype.connect = function (params) {
        return;
    };
    BluetoothLE.prototype.discover = function (params) {
        return;
    };
    BluetoothLE.prototype.subscribe = function (params) {
        return;
    };
    BluetoothLE.prototype.unsubscribe = function (params) {
        return;
    };
    BluetoothLE.prototype.stopScan = function () {
        return;
    };
    BluetoothLE.prototype.bytesToEncodedString = function (bytes) {
        return;
    };
    BluetoothLE.prototype.encodedStringToBytes = function (str) {
        return;
    };
    BluetoothLE.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    BluetoothLE.ctorParameters = function () { return []; };
    __decorate([
        Cordova({ callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], BluetoothLE.prototype, "initialize", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse', sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], BluetoothLE.prototype, "enable", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], BluetoothLE.prototype, "getAdapterInfo", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], BluetoothLE.prototype, "retrieveConnected", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], BluetoothLE.prototype, "isEnabled", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], BluetoothLE.prototype, "requestPermission", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], BluetoothLE.prototype, "requestLocation", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], BluetoothLE.prototype, "isLocationEnabled", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse', observable: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Observable)
    ], BluetoothLE.prototype, "startScan", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], BluetoothLE.prototype, "hasPermission", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], BluetoothLE.prototype, "disconnect", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Object)
    ], BluetoothLE.prototype, "write", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], BluetoothLE.prototype, "read", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse', observable: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Observable)
    ], BluetoothLE.prototype, "connect", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], BluetoothLE.prototype, "discover", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse', observable: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Observable)
    ], BluetoothLE.prototype, "subscribe", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], BluetoothLE.prototype, "unsubscribe", null);
    __decorate([
        Cordova({ callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], BluetoothLE.prototype, "stopScan", null);
    __decorate([
        CordovaProperty,
        __metadata("design:type", Number)
    ], BluetoothLE.prototype, "SCAN_MODE_OPPORTUNISTIC", void 0);
    __decorate([
        CordovaProperty,
        __metadata("design:type", Number)
    ], BluetoothLE.prototype, "SCAN_MODE_LOW_POWER", void 0);
    __decorate([
        CordovaProperty,
        __metadata("design:type", Number)
    ], BluetoothLE.prototype, "SCAN_MODE_BALANCED", void 0);
    __decorate([
        CordovaProperty,
        __metadata("design:type", Number)
    ], BluetoothLE.prototype, "SCAN_MODE_LOW_LATENCY", void 0);
    __decorate([
        CordovaProperty,
        __metadata("design:type", Number)
    ], BluetoothLE.prototype, "MATCH_NUM_ONE_ADVERTISEMENT", void 0);
    __decorate([
        CordovaProperty,
        __metadata("design:type", Number)
    ], BluetoothLE.prototype, "MATCH_NUM_FEW_ADVERTISEMENT", void 0);
    __decorate([
        CordovaProperty,
        __metadata("design:type", Number)
    ], BluetoothLE.prototype, "MATCH_NUM_MAX_ADVERTISEMENT", void 0);
    __decorate([
        CordovaProperty,
        __metadata("design:type", Number)
    ], BluetoothLE.prototype, "MATCH_MODE_AGGRESSIVE", void 0);
    __decorate([
        CordovaProperty,
        __metadata("design:type", Number)
    ], BluetoothLE.prototype, "MATCH_MODE_STICKY", void 0);
    __decorate([
        CordovaProperty,
        __metadata("design:type", Number)
    ], BluetoothLE.prototype, "CALLBACK_TYPE_ALL_MATCHES", void 0);
    __decorate([
        CordovaProperty,
        __metadata("design:type", Number)
    ], BluetoothLE.prototype, "CALLBACK_TYPE_FIRST_MATCH", void 0);
    __decorate([
        CordovaProperty,
        __metadata("design:type", Number)
    ], BluetoothLE.prototype, "CALLBACK_TYPE_MATCH_LOST", void 0);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Uint8Array]),
        __metadata("design:returntype", String)
    ], BluetoothLE.prototype, "bytesToEncodedString", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Uint8Array)
    ], BluetoothLE.prototype, "encodedStringToBytes", null);
    BluetoothLE = __decorate([
        Plugin({
            pluginName: 'BluetoothLE',
            plugin: 'cordova-plugin-bluetoothle',
            pluginRef: 'bluetoothle',
            repo: 'https://github.com/randdusing/cordova-plugin-bluetoothle',
            install: '',
            installVariables: [],
            platforms: ['Android', 'iOS'] // Array of platforms supported, example: ['Android', 'iOS']
        })
    ], BluetoothLE);
    return BluetoothLE;
}(IonicNativePlugin));
export { BluetoothLE };
//# sourceMappingURL=index.js.map